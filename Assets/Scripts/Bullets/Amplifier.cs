using System.Collections.Generic;
using UnityEngine;

public class Amplifier : MonoBehaviour
{
    List<Monster> monsters; //이 증폭기에 영향을 받는 몬스터들
    Ring parent;            //부모링
    float coolTime;         //파티클 쿨타임

    void Awake()
    {
        monsters = new List<Monster>();
    }

    void Update()
    {
        coolTime += Time.deltaTime;

        //증폭기끼리 영역이 겹쳤을 때 하나가 삭제되면 일시적으로 isInAmplify가 false로 변경될 수 있다. 따라서 매 프레임 계속 true로 바꿔주고 증폭량도 갱신해야 함.
        for (int i = monsters.Count - 1; i >= 0; i--)
        {
            monsters[i].isInAmplify = true;
            monsters[i].amplifyInc = Mathf.Max(monsters[i].amplifyInc, parent.curATK * 0.01f);
        }
        
        if (coolTime > 0.5f)    //0.5초마다 파티클 재생
        {
            coolTime = 0.0f;
            for (int i = monsters.Count - 1; i >= 0; i--) monsters[i].PlayParticleCollision(parent.baseRing.id, 0.0f);
        }
        
        //부모 링이 전투에서 제거되면 본인도 제거한다.
        if (!parent.gameObject.activeSelf) RemoveFromBattle();
    }

    //증폭기를 초기화한다.
    public void InitializeAmplifier(Ring par)
    {
        monsters.Clear();
        parent = par;
        transform.position = new Vector3(par.transform.position.x, par.transform.position.y, -0.2f);
        transform.localScale = new Vector3(par.baseRing.range * 2, par.baseRing.range * 2, 1);
    }

    //증폭기를 전투에서 제거한다. 제거하면서 영향을 받던 모든 몬스터들의 추가 피격 상태를 해제하고 증폭량을 초기화한다.
    public void RemoveFromBattle()
    {
        for (int i = monsters.Count - 1; i >= 0; i--)
        {
            monsters[i].isInAmplify = false;
            monsters[i].amplifyInc = 0.0f;
        }
        monsters.Clear();
        GameManager.instance.ReturnAmplifierToPool(this);
    }

    //범위 내에 몬스터가 들어오면 이 증폭기에 영향을 받는 몬스터로 등록한다.
    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.tag == "Monster")
        {
            Monster monster = collision.GetComponent<Monster>();
            monsters.Add(monster);
        }
    }

    //범위 밖으로 몬스터가 나가면 해당 몬스터의 추가 피격 상태를 해제한다.
    void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.tag == "Monster")
        {
            Monster monster = collision.GetComponent<Monster>();
            monster.isInAmplify = false;
            monsters.Remove(monster);
        }
    }
}
